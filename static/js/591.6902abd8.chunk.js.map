{"version":3,"file":"static/js/591.6902abd8.chunk.js","mappings":"8SAEMA,EAAS,SAAC,GAAe,IACvBC,EADsB,EAAZC,MACOC,KAAI,WAAeC,GAAf,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACzB,0BAAcA,EAAd,OAASD,EADgB,IAG3B,OAAO,8BAAGJ,GAAsB,cACjC,EAED,IAEAD,EAAOO,aAAe,CACpBL,MAAO,ICXT,OAAgB,QAAU,6BAA6B,QAAU,6BAA6B,MAAQ,2BAA2B,MAAQ,2BAA2B,eAAiB,oCAAoC,OAAS,4BAA4B,cAAgB,mCAAmC,YAAc,kC,UCWzTM,EAAc,SAAC,GAAuB,IAArBN,EAAoB,EAApBA,MAAOO,EAAa,EAAbA,OACpBC,EAA6DR,EAA7DQ,YAAaC,EAAgDT,EAAhDS,MAAOC,EAAyCV,EAAzCU,aAAcC,EAA2BX,EAA3BW,SAAUC,EAAiBZ,EAAjBY,aAC9CC,EAAOD,EAAeA,EAAaE,OAAO,EAAG,GAAK,GACxD,OACE,oBAASC,UAAWC,EAAAA,QAApB,UACE,iBAAKD,UAAWC,EAAAA,QAAhB,WAEE,gBAAKD,UAAWC,EAAAA,MAAhB,UACE,gBACEC,IAAKT,EAZI,kCAYyBA,EAAcU,EAChDC,IAAKV,EACLW,MAAO,IACPC,OAAQ,SAGZ,4BACE,gBAAIN,UAAWC,EAAAA,MAAf,UAEGP,GACD,gCAAQI,EAAR,WAEF,eAAGE,UAAWC,EAAAA,MAAd,0BACc,6BAAuB,GAAfN,GAAmBY,QAAQ,GAAnC,WAEd,4BACE,eAAIP,UAAWC,EAAAA,eAAf,uBACA,cAAGD,UAAWC,EAAAA,cAAd,SAEGL,QAGL,eAAII,UAAWC,EAAAA,OAAf,qBACA,eAAID,UAAWC,EAAAA,YAAf,SACGT,EAAOgB,OAAS,IAAK,SAAC,EAAD,CAAQvB,MAAOO,aAMhD,EAED,IACAD,EAAYD,aAAe,CACzBE,OAAQ,I,cC9CV,MATA,SAAuBiB,GACrB,IAAK,IAAIC,KAAKD,EACZ,GAAIA,EAAIE,eAAeD,GACrB,OAAO,EAGX,OAAO,CACR,ECND,EAA0B,8BCgD1B,EAtCqB,WACnB,OAA0BE,EAAAA,EAAAA,UAAS,CAAC,GAApC,eAAO3B,EAAP,KAAc4B,EAAd,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA4BH,EAAAA,EAAAA,UAAS,IAArC,eAAOpB,EAAP,KAAewB,EAAf,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQ9B,GAAO+B,EAAAA,EAAAA,MAAP/B,GAmBR,OAjBAgC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,mCAAG,oGAErBN,GAAW,GAFU,UAGCO,EAAAA,EAAAA,IAAclC,GAHf,OAGfmC,EAHe,OAIrBV,GAAS,SAAAW,GAAS,yBAAUA,GAAcD,EAAxB,IAClBP,GAAU,OAAIO,EAAQ/B,SALD,gDAOrB0B,EAAS,KAAMO,SAPM,yBASrBV,GAAW,GATU,4EAAH,qDAatBM,GACD,GAAE,CAACR,EAAUE,EAAYG,EAAUF,EAAW5B,KAG7C,gCACG0B,IACC,gBAAKd,UAAWC,EAAhB,UACE,SAAC,IAAD,MAGHgB,IAAS,uBAAIA,EAAMQ,WAClBC,EAAczC,KAAU,SAAC,EAAD,CAAaA,MAAOA,EAAOO,OAAQA,MAGlE,EC9CD,EAAsB,6BCMhBmC,EAAW,CAAC,OAAQ,WA+B1B,EA7BwB,WAAO,IAAD,EAEtBC,GAAO,WADIC,EAAAA,EAAAA,MACKC,aAAT,eAAgBF,OAAQ,UAE/BG,GAAWC,EAAAA,EAAAA,MAGT5C,GAAO+B,EAAAA,EAAAA,MAAP/B,GAEFJ,EAAW2C,EAASzC,KAAI,SAAC+C,EAAM9C,GAAP,OAC5B,yBACE,SAAC,KAAD,CAAM2C,MAAO,CAAEF,KAAAA,GAAQM,GAAE,kBAAa9C,EAAb,YAAmB6C,GAA5C,SACGA,KAFI9C,EADmB,IAQ9B,OACE,iCACE,mBAAQgD,QAdG,kBAAMJ,EAASH,EAAf,EAcc5B,UAAWC,EAApC,UACE,SAAC,MAAD,OAEF,SAAC,EAAD,KACA,wBAAKjB,KACL,SAAC,KAAD,MAGL,C,yLC/BKoD,E,QAAMC,EAAAA,OAAa,CACvBC,QAAS,gCACTC,OAAQ,CACNC,QANY,sCAUHC,EAAmB,mCAAG,sGACVL,EAAIM,IAAJ,uBADU,uBACzBC,EADyB,EACzBA,KADyB,kBAG1BA,GAH0B,2CAAH,qDAMnBrB,EAAa,mCAAG,WAAMlC,GAAN,yFACJgD,EAAIM,IAAJ,iBAAkBtD,IADd,uBACnBuD,EADmB,EACnBA,KADmB,kBAGpBA,GAHoB,2CAAH,sDAMbC,EAAc,mCAAG,WAAMC,GAAN,yFACLT,EAAIM,IAAJ,gBAAyB,CAC9CH,OAAQ,CACNM,MAAAA,KAHwB,uBACpBF,EADoB,EACpBA,KADoB,kBAMrBA,GANqB,2CAAH,sDASdG,EAAW,mCAAG,WAAM1D,GAAN,yFACFgD,EAAIM,IAAJ,iBAAkBtD,EAAlB,aADE,uBACjBuD,EADiB,EACjBA,KADiB,kBAGlBA,GAHkB,2CAAH,sDAMXI,EAAc,mCAAG,WAAM3D,GAAN,yFACLgD,EAAIM,IAAJ,iBAAkBtD,EAAlB,aADK,uBACpBuD,EADoB,EACpBA,KACRK,QAAQC,IAAIN,GAFgB,kBAGrBA,GAHqB,2CAAH,qD,oGCnCdO,EAAU,WACrB,OACE,SAAC,KAAD,CACE5C,OAAO,KACPD,MAAM,KACN8C,OAAO,IACPC,MAAM,UACNC,UAAU,qBACVC,aAAc,CAAC,EACfC,iBAAiB,GACjBC,SAAS,GAGd,EAEYC,EAAkB,WAC7B,OACE,SAAC,KAAD,CACEC,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBvD,MAAM,KACNmD,SAAS,GAGd,C","sources":["modules/MovieDetails/Genres/Genres.jsx","webpack://react-homework-template/./src/modules/MovieDetails/SingleMovie/SingleMovie.module.css?7381","modules/MovieDetails/SingleMovie/SingleMovie.jsx","shared/utilis/isEmptyObject.js","webpack://react-homework-template/./src/modules/MovieDetails/MovieDetalis.module.css?d583","modules/MovieDetails/MovieDetails.jsx","webpack://react-homework-template/./src/pages/SingleMoviePage/SingleMoviePage.module.css?7cb7","pages/SingleMoviePage/SingleMoviePage.jsx","shared/servises/movie-api.js","shared/utilis/Spinner/DnaSpinner.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nconst Genres = ({ items }) => {\n  const elements = items.map(({ id, name }, index) => (\n    <li key={id}>{name}, </li>\n  ));\n  return <>{elements ? elements : 'all genres'}</>;\n};\n\nexport default Genres;\n\nGenres.defaultProps = {\n  items: [],\n};\n\nGenres.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      name: PropTypes.string.isRequired,\n    })\n  ),\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"SingleMovie_section__-Rf9n\",\"wrapper\":\"SingleMovie_wrapper__JVuhh\",\"title\":\"SingleMovie_title__Cljjv\",\"score\":\"SingleMovie_score__XCa-U\",\"overview_title\":\"SingleMovie_overview_title__d81TB\",\"genres\":\"SingleMovie_genres__bUT-+\",\"overview__box\":\"SingleMovie_overview__box__E8k9F\",\"genres_list\":\"SingleMovie_genres_list__+KEEp\"};","import PropTypes from 'prop-types';\n\nimport Genres from '../Genres/Genres';\n\nimport css from './SingleMovie.module.css';\nimport defaultPoster from '../../../resurse/images/no-poster.jpg';\n\n// import { RotatingSpinner } from 'shared/utilis/Spinner/DnaSpinner';\n\nconst baseImageUrl = 'https://image.tmdb.org/t/p/w342';\n// const imagePlaceholder = 'https://via.placeholder.com/342x487 ';\n\nconst SingleMovie = ({ items, genres }) => {\n  const { poster_path, title, vote_average, overview, release_date } = items;\n  const year = release_date ? release_date.substr(0, 4) : '';\n  return (\n    <section className={css.section}>\n      <div className={css.wrapper}>\n        {/* {baseImageUrl + poster_path && <RotatingSpinner />} */}\n        <div className={css.thumb}>\n          <img\n            src={poster_path ? baseImageUrl + poster_path : defaultPoster}\n            alt={title}\n            width={242}\n            height={387}\n          />\n        </div>\n        <div>\n          <h1 className={css.title}>\n            {/* {title ? title : 'No Title'} <span>({year})</span> */}\n            {title}\n            <span>({year})</span>\n          </h1>\n          <p className={css.score}>\n            User Score: <span>{(vote_average * 10).toFixed(1)}%</span>\n          </p>\n          <div>\n            <h2 className={css.overview_title}>overview</h2>\n            <p className={css.overview__box}>\n              {/* {overview ? overview : 'No overview'} */}\n              {overview}\n            </p>\n          </div>\n          <h3 className={css.genres}>Genres</h3>\n          <ul className={css.genres_list}>\n            {genres.length > 0 && <Genres items={genres} />}\n          </ul>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default SingleMovie;\nSingleMovie.defaultProps = {\n  genres: [],\n};\n\nSingleMovie.propTypes = {\n  items: PropTypes.shape({\n    poster_path: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    release_date: PropTypes.string.isRequired,\n    vote_average: PropTypes.number.isRequired,\n  }),\n  genres: PropTypes.array,\n};\n","function isEmptyObject(obj) {\n  for (let i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default isEmptyObject;\n","// extracted by mini-css-extract-plugin\nexport default {\"wrapper\":\"MovieDetalis_wrapper__p9JDC\"};","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { Spinner } from 'shared/utilis/Spinner/DnaSpinner';\nimport SingleMovie from './SingleMovie/SingleMovie';\n\nimport { getMoviesById } from '../../shared/servises/movie-api';\nimport isEmptyObject from '../../shared/utilis/isEmptyObject';\n\nimport css from './MovieDetalis.module.css';\n\nconst MovieDetails = () => {\n  const [items, setItems] = useState({});\n  const [loading, setLoading] = useState(false);\n  const [genres, setGenres] = useState([]);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesToday = async () => {\n      try {\n        setLoading(true);\n        const results = await getMoviesById(id);\n        setItems(prevItems => ({ ...prevItems, ...results }));\n        setGenres([...results.genres]);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchMoviesToday();\n  }, [setItems, setLoading, setError, setGenres, id]);\n\n  return (\n    <>\n      {loading && (\n        <div className={css.wrapper}>\n          <Spinner />\n        </div>\n      )}\n      {error && <p>{error.message}</p>}\n      {!isEmptyObject(items) && <SingleMovie items={items} genres={genres} />}\n    </>\n  );\n};\n\nexport default MovieDetails;\n","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"SingleMoviePage_btn__L8xMQ\"};","import { useNavigate, useLocation, Link, useParams, Outlet } from 'react-router-dom';\nimport { FaArrowLeft } from 'react-icons/fa';\n\nimport MovieDetails from '../../modules/MovieDetails/MovieDetails';\n\nimport css from './SingleMoviePage.module.css';\n\nconst menuRefs = ['cast', 'reviews'];\n\nconst SingleMoviePage = () => {\n  const location = useLocation();\n  const from = location.state?.from || '/movies';\n\n  const navigate = useNavigate();\n  const goBack = () => navigate(from);\n\n  const { id } = useParams();\n\n  const elements = menuRefs.map((item, index) => (\n    <li key={index}>\n      <Link state={{ from }} to={`/movies/${id}/${item}`}>\n        {item}\n      </Link>\n    </li>\n  ));\n\n  return (\n    <>\n      <button onClick={goBack} className={css.btn}>\n        <FaArrowLeft />\n      </button>\n      <MovieDetails />\n      <ul>{elements}</ul>\n      <Outlet />\n    </>\n  );\n};\n\nexport default SingleMoviePage;\n","import axios from 'axios';\n\nconst API_KEY = '424988524fcdd3be3cb6b3927eeba2ee';\n// const BASE_URL = 'https://api.themoviedb.org/3/';\n\nconst api = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: API_KEY,\n  },\n});\n\nexport const getTrendMoviesToday = async () => {\n  const { data } = await api.get(`/trending/movie/day`);\n\n  return data;\n};\n\nexport const getMoviesById = async id => {\n  const { data } = await api.get(`/movie/${id}`);\n\n  return data;\n};\n\nexport const getSearchPosts = async query => {\n  const { data } = await api.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getCastById = async id => {\n  const { data } = await api.get(`/movie/${id}/credits`);\n\n  return data;\n};\n\nexport const getReviewsById = async id => {\n  const { data } = await api.get(`/movie/${id}/reviews`);\n  console.log(data);\n  return data;\n};\n","import { ThreeDots, RotatingLines } from 'react-loader-spinner';\n\n// import css from './Spinner.module.css';\n\nexport const Spinner = () => {\n  return (\n    <ThreeDots\n      height=\"40\"\n      width=\"40\"\n      radius=\"9\"\n      color=\"#4fa94d\"\n      ariaLabel=\"three-dots-loading\"\n      wrapperStyle={{}}\n      wrapperClassName=\"\"\n      visible={true}\n    />\n  );\n};\n\nexport const RotatingSpinner = () => {\n  return (\n    <RotatingLines\n      strokeColor=\"grey\"\n      strokeWidth=\"5\"\n      animationDuration=\"0.75\"\n      width=\"32\"\n      visible={true}\n    />\n  );\n};\n"],"names":["Genres","elements","items","map","index","id","name","defaultProps","SingleMovie","genres","poster_path","title","vote_average","overview","release_date","year","substr","className","css","src","defaultPoster","alt","width","height","toFixed","length","obj","i","hasOwnProperty","useState","setItems","loading","setLoading","setGenres","error","setError","useParams","useEffect","fetchMoviesToday","getMoviesById","results","prevItems","message","isEmptyObject","menuRefs","from","useLocation","state","navigate","useNavigate","item","to","onClick","api","axios","baseURL","params","api_key","getTrendMoviesToday","get","data","getSearchPosts","query","getCastById","getReviewsById","console","log","Spinner","radius","color","ariaLabel","wrapperStyle","wrapperClassName","visible","RotatingSpinner","strokeColor","strokeWidth","animationDuration"],"sourceRoot":""}